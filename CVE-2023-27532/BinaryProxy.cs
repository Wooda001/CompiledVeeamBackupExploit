using System.Runtime.Serialization;

//https://stackoverflow.com/questions/13594831/binaryformatter-is-it-possible-to-deserialize-known-class-without-the-assembly
namespace CVE_2023_27532;

class ProxyTestClass
{
    private Dictionary<string, object> data = new Dictionary<string, object>();

    public Object GetData(string name)
    {
        if (data.ContainsKey(name))
        {
            return data[name];
        }

        return null;
    }

    public void SetData(string name, object value)
    {
        data[name] = value;
    }

    public IEnumerable<KeyValuePair<string, object>> Dump()
    {
        return data;
    }
}

class SurrogateTestClassConstructor : ISerializationSurrogate
{
    private ProxyTestClass mProxy;

    /// <summary>
    /// Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the object.
    /// </summary>
    /// <param name="obj">The object to serialize. </param>
    /// <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
    /// <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param>
    /// <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)
    {
        throw new NotImplementedException();
    }

    /// <summary>
    /// Populates the object using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
    /// </summary>
    /// <returns>
    /// The populated deserialized object.
    /// </returns>
    /// <param name="obj">The object to populate. </param>
    /// <param name="info">The information to populate the object. </param>
    /// <param name="context">The source from which the object is deserialized. </param>
    /// <param name="selector">The surrogate selector where the search for a compatible surrogate begins. </param>
    /// <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    public object SetObjectData(object obj, SerializationInfo info, StreamingContext context,
        ISurrogateSelector selector)
    {
        if (mProxy == null) mProxy = new ProxyTestClass();
        var en = info.GetEnumerator();
        while (en.MoveNext())
        {
            mProxy.SetData(en.Current.Name, en.Current.Value);
        }

        return mProxy;
    }
}

sealed class DeserializeBinder : SerializationBinder
{
    public override Type BindToType(string assemblyName, string typeName)
    {
        return typeof(ProxyTestClass);
    }
}